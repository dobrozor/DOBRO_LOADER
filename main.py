import tkinter as tk
from tkinter import filedialog, messagebox
import customtkinter as ctk
import threading
import sys
import os
import shutil
import json
from urllib.parse import urlparse
from kinescope import KinescopeVideo, KinescopeDownloader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")


def get_resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.dirname(os.path.abspath(sys.argv[0]))
    return os.path.join(base_path, relative_path)


def setup_bin_directory():
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É bin –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ç—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ exe-—Ñ–∞–π–ª—ã"""
    bin_dir = os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), "bin")
    os.makedirs(bin_dir, exist_ok=True)

    ffmpeg_src = get_resource_path("ffmpeg/bin/ffmpeg.exe")
    ffmpeg_dst = os.path.join(bin_dir, "ffmpeg.exe")
    if not os.path.exists(ffmpeg_dst) and os.path.exists(ffmpeg_src):
        shutil.copy2(ffmpeg_src, ffmpeg_dst)

    mp4decrypt_src = get_resource_path("mp4decrypt.exe")
    mp4decrypt_dst = os.path.join(bin_dir, "mp4decrypt.exe")
    if not os.path.exists(mp4decrypt_dst) and os.path.exists(mp4decrypt_src):
        shutil.copy2(mp4decrypt_src, mp4decrypt_dst)

    return bin_dir


def validate_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL"""
    try:
        parsed = urlparse(url)
        return all([parsed.scheme, parsed.netloc])
    except:
        return False


def extract_from_json(json_filepath):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏ Referer –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(json_filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)

        video_url = data.get('url', '')
        referer = data.get('referrer', '')
        video_id = data.get('meta', {}).get('videoId', '')

        return video_url, referer, video_id

    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {str(e)}")


class CustomProgressBar:
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –≤ —Å—Ç–∏–ª–µ –∫–æ–Ω—Å–æ–ª–∏"""

    def __init__(self, parent, label):
        self.frame = ctk.CTkFrame(parent, fg_color="transparent")
        self.frame.pack(fill="x", pady=2)

        self.label = ctk.CTkLabel(self.frame, text=label, width=60, anchor="w")
        self.label.pack(side="left", padx=(0, 10))

        self.progress_bar = ctk.CTkProgressBar(self.frame, height=12, progress_color="#FF6B35")
        self.progress_bar.pack(side="left", fill="x", expand=True)
        self.progress_bar.set(0)

        self.percentage_label = ctk.CTkLabel(self.frame, text="0%", width=40)
        self.percentage_label.pack(side="right", padx=(10, 0))

        self.count_label = ctk.CTkLabel(self.frame, text="[0/0]", width=50)
        self.count_label.pack(side="right")

    def update(self, current, total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä"""
        progress = current / total if total > 0 else 0
        self.progress_bar.set(progress)
        self.percentage_label.configure(text=f"{int(progress * 100)}%")
        self.count_label.configure(text=f"[{current}/{total}]")


class KinescopeDownloaderGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("DOBRO LOADER")
        self.root.geometry("500x800")
        self.root.resizable(True, True)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            icon_path = get_resource_path("icon.svg")
            if os.path.exists(icon_path):
                # –î–ª—è SVG —Ñ–∞–π–ª–æ–≤ –≤ tkinter –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏,
                # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ICO —Ñ–∞–π–ª –∏–ª–∏ PNG
                # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å icon.ico –∏–ª–∏ icon.png, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤–º–µ—Å—Ç–æ SVG
                pass
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.accent_color = "#fb9422"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç
        self.light_bg = "#F8F9FA"
        self.card_bg = "#FFFFFF"

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.video_url = tk.StringVar()
        self.referer_url = tk.StringVar()
        self.output_file = tk.StringVar()
        self.selected_quality = tk.StringVar()
        self.download_in_progress = False
        self.qualities_loaded = False
        self.current_json_file = tk.StringVar(value="")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
        self.video_progress = None
        self.audio_progress = None

        self.setup_ui()

    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(self.root, fg_color=self.light_bg)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        header_frame = ctk.CTkFrame(main_container, fg_color="transparent")
        header_frame.pack(fill="x", pady=(0, 20))


        try:
            logo_path = get_resource_path("logo.png")
            if os.path.exists(logo_path):
                from PIL import Image
                logo_image = ctk.CTkImage(
                    light_image=Image.open(logo_path),
                    dark_image=Image.open(logo_path),
                    size=(375, 160)
                )
                logo_label = ctk.CTkLabel(header_frame, image=logo_image, text="")
                logo_label.pack(pady=(10, 10))
            else:
                # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title_label = ctk.CTkLabel(header_frame,
                                           text="DOBRO LOADER",
                                           font=ctk.CTkFont(size=24, weight="bold"),
                                           text_color="#2C3E50")
                title_label.pack(pady=(0, 10))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø: {e}")
            # Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = ctk.CTkLabel(header_frame,
                                       text="DOBRO LOADER",
                                       font=ctk.CTkFont(size=24, weight="bold"),
                                       text_color="#2C3E50")
            title_label.pack(pady=(0, 10))


        subtitle_label = ctk.CTkLabel(header_frame,
                                      text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ",
                                      font=ctk.CTkFont(size=12),
                                      text_color="#7F8C8D")
        subtitle_label.pack()

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON
        json_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        json_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(json_card,
                     text="–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        json_button = ctk.CTkButton(json_card,
                                    text="üìÅ –í—ã–±—Ä–∞—Ç—å JSON —Ñ–∞–π–ª",
                                    text_color="#2C3E50",
                                    command=self.load_json_file,
                                    fg_color=self.accent_color,
                                    hover_color="#f48200",
                                    height=40)
        json_button.pack(fill="x", padx=20, pady=(0, 10))

        self.json_status_label = ctk.CTkLabel(json_card,
                                              text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω",
                                              font=ctk.CTkFont(size=11),
                                              text_color="#7F8C8D")
        self.json_status_label.pack(anchor="w", padx=20, pady=(0, 20))

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        self.quality_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(self.quality_card,
                     text="–®–∞–≥ 2: –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        self.quality_combo = ctk.CTkComboBox(self.quality_card,
                                             variable=self.selected_quality,
                                             state="readonly",
                                             height=35,
                                             border_color="#E0E0E0")
        self.quality_combo.pack(fill="x", padx=20, pady=(0, 10))
        self.quality_combo.set("")

        self.qualities_status_label = ctk.CTkLabel(self.quality_card,
                                                   text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª",
                                                   font=ctk.CTkFont(size=11),
                                                   text_color="#7F8C8D")
        self.qualities_status_label.pack(anchor="w", padx=20, pady=(0, 20))

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        save_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(save_card,
                     text="–®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        save_frame = ctk.CTkFrame(save_card, fg_color="transparent")
        save_frame.pack(fill="x", padx=20, pady=(0, 10))

        self.file_entry = ctk.CTkEntry(save_frame,
                                       textvariable=self.output_file,
                                       placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...",
                                       height=35)
        self.file_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))

        browse_button = ctk.CTkButton(save_frame,
                                      text="–û–±–∑–æ—Ä",
                                      command=self.browse_file,
                                      width=80,
                                      height=35,
                                      fg_color="#34495E",
                                      hover_color="#2C3E50")
        browse_button.pack(side="right")

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        self.progress_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(self.progress_card,
                     text="–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        self.progress_text = ctk.CTkTextbox(self.progress_card, height=120,
                                            font=ctk.CTkFont(family="Consolas", size=11))
        self.progress_text.pack(fill="x", padx=20, pady=(0, 20))
        self.progress_text.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ctk.CTkFrame(main_container, fg_color="transparent")
        button_frame.pack(fill="x")

        self.download_button = ctk.CTkButton(button_frame,
                                             text="–ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ",
                                             text_color="#2C3E50",
                                             command=self.start_download,
                                             state="disabled",
                                             height=45,
                                             font=ctk.CTkFont(size=14),
                                             fg_color=self.accent_color,
                                             hover_color="#f48200")
        self.download_button.pack(side="left", fill="x", expand=True, padx=(0, 10))

        clear_button = ctk.CTkButton(button_frame,
                                     text="–û—á–∏—Å—Ç–∏—Ç—å",
                                     command=self.clear_fields,
                                     height=45,
                                     fg_color="#95A5A6",
                                     hover_color="#7F8C8D")
        clear_button.pack(side="right")

        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        self.progress_card.pack_forget()

    def add_progress_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_text.configure(state="normal")
        self.progress_text.insert("end", message + "\n")
        self.progress_text.see("end")
        self.progress_text.configure(state="disabled")
        self.root.update_idletasks()

    def load_json_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )

        if not filename:
            return

        try:
            video_url, referer, video_id = extract_from_json(filename)

            if not video_url:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –≤ JSON —Ñ–∞–π–ª–µ")
                return

            if not referer:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Referer –≤ JSON —Ñ–∞–π–ª–µ")
                return

            self.video_url.set(video_url)
            self.referer_url.set(referer)
            self.current_json_file.set(filename)

            file_name = os.path.basename(filename)
            self.json_status_label.configure(text=f"‚úì {file_name}", text_color="#27AE60")
            self.qualities_status_label.configure(text="–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤...", text_color="#3498DB")

            self.fetch_qualities_auto()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON —Ñ–∞–π–ª–∞:\n{str(e)}")

    def fetch_qualities_auto(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ JSON"""
        fetch_thread = threading.Thread(target=self._fetch_qualities_thread)
        fetch_thread.daemon = True
        fetch_thread.start()

    def browse_file(self):
        filename = filedialog.asksaveasfilename(
            defaultextension=".mp4",
            filetypes=[("MP4 files", "*.mp4"), ("All files", "*.*")]
        )
        if filename:
            self.output_file.set(filename)

    def _fetch_qualities_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤"""
        try:
            bin_dir = setup_bin_directory()
            ffmpeg_path = os.path.join(bin_dir, "ffmpeg.exe")
            mp4decrypt_path = os.path.join(bin_dir, "mp4decrypt.exe")

            kinescope_video = KinescopeVideo(
                url=self.video_url.get(),
                referer_url=self.referer_url.get()
            )

            downloader = KinescopeDownloader(
                kinescope_video,
                temp_dir='./temp',
                ffmpeg_path=ffmpeg_path,
                mp4decrypt_path=mp4decrypt_path
            )

            video_resolutions = downloader.get_resolutions()

            if not video_resolutions:
                self.root.after(0, lambda: self.qualities_status_label.configure(
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ",
                    text_color="#E74C3C"
                ))
                return

            self.root.after(0, lambda: self._update_qualities_ui(video_resolutions))

            downloader.cleanup()

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤: {str(e)}"
            self.root.after(0, lambda: self.qualities_status_label.configure(
                text=error_msg,
                text_color="#E74C3C"
            ))

    def _update_qualities_ui(self, resolutions):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏"""
        quality_list = [f"{res[1]}p" for res in resolutions]
        self.quality_combo.configure(values=quality_list)

        if quality_list:
            self.quality_combo.set(quality_list[-1])  # –°—Ç–∞–≤–∏–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.qualities_loaded = True

            self.qualities_status_label.configure(
                text=f"‚úì –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—á–µ—Å—Ç–≤: {len(quality_list)}",
                text_color="#27AE60"
            )

            self.download_button.configure(state="normal")
        else:
            self.qualities_status_label.configure(
                text="–ö–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                text_color="#E74C3C"
            )

    def start_download(self):
        if self.download_in_progress:
            return

        if not self.output_file.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            return

        if not self.qualities_loaded:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_card.pack(fill="x", pady=(0, 20))

        self.download_in_progress = True
        self.download_button.configure(state="disabled")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_text.configure(state="normal")
        self.progress_text.delete("1.0", "end")
        self.progress_text.configure(state="disabled")

        download_thread = threading.Thread(target=self.download_video)
        download_thread.daemon = True
        download_thread.start()

    def download_video(self):
        try:
            self.add_progress_message("[*] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")

            bin_dir = setup_bin_directory()
            ffmpeg_path = os.path.join(bin_dir, "ffmpeg.exe")
            mp4decrypt_path = os.path.join(bin_dir, "mp4decrypt.exe")

            self.add_progress_message("[*] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            kinescope_video = KinescopeVideo(
                url=self.video_url.get(),
                referer_url=self.referer_url.get()
            )

            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            class ProgressDownloader(KinescopeDownloader):
                def __init__(self, *args, **kwargs):
                    self.gui = kwargs.pop('gui')
                    super().__init__(*args, **kwargs)

                def _fetch_segments(self, segments_urls, filepath, progress_bar_label):
                    segments_urls = [seg for i, seg in enumerate(segments_urls) if i == segments_urls.index(seg)]
                    with open(filepath, 'wb') as f:
                        total = len(segments_urls)
                        for i, segment_url in enumerate(segments_urls, 1):
                            self._fetch_segment(segment_url, f)
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ GUI
                            self.gui.root.after(0, lambda: self.gui.add_progress_message(
                                f"{progress_bar_label}: {i}/{total} |{'‚ñà' * (i * 20 // total):20}| {i * 100 // total}%"
                            ))

            downloader = ProgressDownloader(
                kinescope_video,
                temp_dir='./temp',
                ffmpeg_path=ffmpeg_path,
                mp4decrypt_path=mp4decrypt_path,
                gui=self
            )

            video_resolutions = downloader.get_resolutions()

            if not video_resolutions:
                self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            selected_quality_str = self.quality_combo.get()
            selected_height = int(selected_quality_str.replace('p', ''))
            chosen_resolution = None

            for res in video_resolutions:
                if res[1] == selected_height:
                    chosen_resolution = res
                    break

            if not chosen_resolution:
                chosen_resolution = video_resolutions[-1]

            self.add_progress_message(f"[*] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ {selected_quality_str}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            downloader.download(self.output_file.get(), chosen_resolution)

            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.add_progress_message("[+] –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!\n–§–∞–π–ª: {self.output_file.get()}")

        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        finally:
            if 'downloader' in locals():
                downloader.cleanup()
            self.download_in_progress = False
            self.download_button.configure(state="normal")

    def show_error(self, message):
        self.add_progress_message(f"[!] {message}")
        messagebox.showerror("–û—à–∏–±–∫–∞", message)
        self.download_in_progress = False
        self.download_button.configure(state="normal")

    def clear_fields(self):
        self.video_url.set("")
        self.referer_url.set("")
        self.output_file.set("")
        self.selected_quality.set("")
        self.quality_combo.set("")
        self.quality_combo.configure(values=[])
        self.qualities_loaded = False
        self.current_json_file.set("")
        self.json_status_label.configure(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", text_color="#7F8C8D")
        self.qualities_status_label.configure(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª", text_color="#7F8C8D")
        self.download_button.configure(state="disabled")
        self.progress_card.pack_forget()


def main():
    root = ctk.CTk()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è Windows)
    try:
        icon_path = get_resource_path("icon.ico")  # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ICO –¥–ª—è Windows
        if os.path.exists(icon_path):
            root.iconbitmap(icon_path)
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º PNG —á–µ—Ä–µ–∑ PhotoImage (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            icon_path_png = get_resource_path("icon.png")
            if os.path.exists(icon_path_png):
                icon_image = tk.PhotoImage(file=icon_path_png)
                root.iconphoto(True, icon_image)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    app = KinescopeDownloaderGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()