import tkinter as tk
from tkinter import filedialog, messagebox
import customtkinter as ctk
import threading
import sys
import os
import shutil
import json
import re
import subprocess
import requests
import httpx
from urllib.parse import urlparse
from pywidevine.cdm import Cdm
from pywidevine.device import Device
from pywidevine.pssh import PSSH
import tqdm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")


def get_resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.dirname(os.path.abspath(sys.argv[0]))
    return os.path.join(base_path, relative_path)


def setup_bin_directory():
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É bin –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ç—É–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ exe-—Ñ–∞–π–ª—ã"""
    bin_dir = os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), "bin")
    os.makedirs(bin_dir, exist_ok=True)

    ffmpeg_src = get_resource_path("ffmpeg/bin/ffmpeg.exe")
    ffmpeg_dst = os.path.join(bin_dir, "ffmpeg.exe")
    if not os.path.exists(ffmpeg_dst) and os.path.exists(ffmpeg_src):
        shutil.copy2(ffmpeg_src, ffmpeg_dst)

    mp4decrypt_src = get_resource_path("mp4decrypt.exe")
    mp4decrypt_dst = os.path.join(bin_dir, "mp4decrypt.exe")
    if not os.path.exists(mp4decrypt_dst) and os.path.exists(mp4decrypt_src):
        shutil.copy2(mp4decrypt_src, mp4decrypt_dst)

    n_m3u8dl_src = get_resource_path("N_m3u8DL-RE.exe")
    n_m3u8dl_dst = os.path.join(bin_dir, "N_m3u8DL-RE.exe")
    if not os.path.exists(n_m3u8dl_dst) and os.path.exists(n_m3u8dl_src):
        shutil.copy2(n_m3u8dl_src, n_m3u8dl_dst)

    return bin_dir


def validate_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL"""
    try:
        parsed = urlparse(url)
        return all([parsed.scheme, parsed.netloc])
    except:
        return False


def extract_from_json(json_filepath):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL, Referer –∏ Title –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(json_filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)

        video_url = data.get('url', '')
        referer = data.get('referrer', '')
        video_id = data.get('meta', {}).get('videoId', '')
        # –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
        video_title = data.get('meta', {}).get('title', '')

        return video_url, referer, video_id, data, video_title # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ video_title

    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {str(e)}")

class KinescopeDownloaderGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("DOBRO LOADER")
        self.root.geometry("500x850")
        self.root.resizable(True, True)

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.accent_color = "#fb9422"
        self.light_bg = "#F8F9FA"
        self.card_bg = "#FFFFFF"

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.video_url = tk.StringVar()
        self.referer_url = tk.StringVar()
        self.output_file = tk.StringVar()
        self.selected_quality = tk.StringVar()
        self.download_in_progress = False
        self.qualities_loaded = False
        self.current_json_file = tk.StringVar(value="")
        self.json_data = None
        self.available_qualities = []
        self.drm_keys = []
        self.video_title = tk.StringVar(value="")


        self.setup_ui()

    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(self.root, fg_color=self.light_bg)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        header_frame = ctk.CTkFrame(main_container, fg_color="transparent")
        header_frame.pack(fill="x", pady=(0, 20))

        # –õ–æ–≥–æ—Ç–∏–ø (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)
        try:
            logo_path = get_resource_path("logo.png")
            if os.path.exists(logo_path):
                from PIL import Image
                logo_image = ctk.CTkImage(
                    light_image=Image.open(logo_path),
                    dark_image=Image.open(logo_path),
                    size=(375, 160)
                )
                logo_label = ctk.CTkLabel(header_frame, image=logo_image, text="")
                logo_label.pack(pady=(10, 10))
            else:
                title_label = ctk.CTkLabel(header_frame,
                                           text="DOBRO LOADER",
                                           font=ctk.CTkFont(size=24, weight="bold"),
                                           text_color="#2C3E50")
                title_label.pack(pady=(0, 10))
        except Exception as e:
            title_label = ctk.CTkLabel(header_frame,
                                       text="DOBRO LOADER",
                                       font=ctk.CTkFont(size=24, weight="bold"),
                                       text_color="#2C3E50")
            title_label.pack(pady=(0, 10))

        subtitle_label = ctk.CTkLabel(header_frame,
                                      text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ",
                                      font=ctk.CTkFont(size=12),
                                      text_color="#7F8C8D")
        subtitle_label.pack()

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON
        json_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        json_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(json_card,
                     text="–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        json_button = ctk.CTkButton(json_card,
                                    text="üìÅ –í—ã–±—Ä–∞—Ç—å JSON —Ñ–∞–π–ª",
                                    text_color="#2C3E50",
                                    command=self.load_json_file,
                                    fg_color=self.accent_color,
                                    hover_color="#f48200",
                                    height=40)
        json_button.pack(fill="x", padx=20, pady=(0, 10))

        self.json_status_label = ctk.CTkLabel(json_card,
                                              text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω",
                                              font=ctk.CTkFont(size=11),
                                              text_color="#7F8C8D")
        self.json_status_label.pack(anchor="w", padx=20, pady=(0, 20))

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        self.quality_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(self.quality_card,
                     text="–®–∞–≥ 2: –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        self.quality_combo = ctk.CTkComboBox(self.quality_card,
                                             variable=self.selected_quality,
                                             state="readonly",
                                             height=35,
                                             border_color="#E0E0E0")
        self.quality_combo.pack(fill="x", padx=20, pady=(0, 10))
        self.quality_combo.set("")

        self.qualities_status_label = ctk.CTkLabel(self.quality_card,
                                                   text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª",
                                                   font=ctk.CTkFont(size=11),
                                                   text_color="#7F8C8D")
        self.qualities_status_label.pack(anchor="w", padx=20, pady=(0, 20))

        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        save_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(save_card,
                     text="–®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        save_frame = ctk.CTkFrame(save_card, fg_color="transparent")
        save_frame.pack(fill="x", padx=20, pady=(0, 10))

        self.file_entry = ctk.CTkEntry(save_frame,
                                       textvariable=self.output_file,
                                       placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...",
                                       height=35)
        self.file_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))

        browse_button = ctk.CTkButton(save_frame,
                                      text="–û–±–∑–æ—Ä",
                                      command=self.browse_file,
                                      width=80,
                                      height=35,
                                      fg_color="#34495E",
                                      hover_color="#2C3E50")
        browse_button.pack(side="right")

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_card = ctk.CTkFrame(main_container, fg_color=self.card_bg, corner_radius=12)
        self.progress_card.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(self.progress_card,
                     text="–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏",
                     font=ctk.CTkFont(size=14, weight="bold"),
                     text_color="#2C3E50").pack(anchor="w", padx=20, pady=(20, 10))

        self.progress_text = ctk.CTkTextbox(self.progress_card, height=120,
                                            font=ctk.CTkFont(family="Consolas", size=11))
        self.progress_text.pack(fill="x", padx=20, pady=(0, 20))
        self.progress_text.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–û–ë–ù–û–í–õ–ï–ù–ò–ï: –û–î–ù–ê –ö–ù–û–ü–ö–ê)
        download_buttons_frame = ctk.CTkFrame(main_container, fg_color="transparent")
        download_buttons_frame.pack(fill="x", pady=(0, 10))

        self.download_button = ctk.CTkButton(download_buttons_frame,
                                             text="–°–∫–∞—á–∞—Ç—å",
                                             text_color="#FFFFFF",  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ —Ñ–æ–Ω–∞
                                             command=self.start_unified_download,  # –û–ë–ù–û–í–õ–ï–ù–ò–ï
                                             state="disabled",
                                             height=45,
                                             font=ctk.CTkFont(size=16, weight="bold"),
                                             fg_color="#27AE60",
                                             hover_color="#229954")
        self.download_button.pack(fill="x", expand=True)  # –û–ë–ù–û–í–õ–ï–ù–ò–ï

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ctk.CTkFrame(main_container, fg_color="transparent")
        button_frame.pack(fill="x")

        clear_button = ctk.CTkButton(button_frame,
                                     text="–û—á–∏—Å—Ç–∏—Ç—å",
                                     command=self.clear_fields,
                                     height=45,
                                     fg_color="#95A5A6",
                                     hover_color="#7F8C8D")
        clear_button.pack(side="right")

        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        self.progress_card.pack_forget()

    def add_progress_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_text.configure(state="normal")
        self.progress_text.insert("end", message + "\n")
        self.progress_text.see("end")
        self.progress_text.configure(state="disabled")
        self.root.update_idletasks()

    def load_json_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )

        if not filename:
            return

        try:
            # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º video_title
            video_url, referer, video_id, json_data, video_title = extract_from_json(filename)
            self.json_data = json_data

            if not video_url:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –≤ JSON —Ñ–∞–π–ª–µ")
                return

            if not referer:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Referer –≤ JSON —Ñ–∞–π–ª–µ")
                return

            self.video_url.set(video_url)
            self.referer_url.set(referer)
            self.current_json_file.set(filename)
            self.video_title.set(video_title)  # –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ

            file_name = os.path.basename(filename)
            self.json_status_label.configure(text=f"‚úì {file_name}", text_color="#27AE60")
            self.qualities_status_label.configure(text="–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤ –∏ –∫–ª—é—á–∏...", text_color="#3498DB")

            # –ù–û–í–û–ï: –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self._set_default_output_filename(video_title)

            self.fetch_qualities_and_keys()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON —Ñ–∞–π–ª–∞:\n{str(e)}")

    def _set_default_output_filename(self, title):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ"""
        if title:
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .mp4
            safe_title = re.sub(r'[\\/:*?"<>|]', '_', title)
            default_filename = safe_title + ".mp4"
            # –ï—Å–ª–∏ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if not self.output_file.get() or self.output_file.get().endswith(".mp4"):
                self.output_file.set(os.path.join(os.getcwd(), default_filename))

    def fetch_qualities_and_keys(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—á–µ—Å—Ç–≤ –∏ DRM –∫–ª—é—á–∏"""
        fetch_thread = threading.Thread(target=self._fetch_qualities_and_keys_thread)
        fetch_thread.daemon = True
        fetch_thread.start()

    def _fetch_qualities_and_keys_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤ –∏ –∫–ª—é—á–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ JSON
            qualities = self._extract_qualities_from_json()

            if qualities:
                self.root.after(0, lambda: self._update_qualities_ui(qualities))
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ JSON, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                self._fetch_qualities_standard()

            # –ü–æ–ª—É—á–∞–µ–º DRM –∫–ª—é—á–∏
            self._fetch_drm_keys()

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            self.root.after(0, lambda: self.qualities_status_label.configure(
                text=error_msg,
                text_color="#E74C3C"
            ))

    def _extract_qualities_from_json(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö"""
        qualities = []
        if self.json_data and 'options' in self.json_data and 'playlist' in self.json_data['options']:
            for item in self.json_data['options']['playlist']:
                if 'frameRate' in item:
                    for quality in item['frameRate'].keys():
                        if quality.isdigit():
                            qualities.append(int(quality))

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        qualities = sorted(list(set(qualities)))
        return qualities

    def _fetch_qualities_standard(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
        try:
            from kinescope import KinescopeVideo, KinescopeDownloader

            bin_dir = setup_bin_directory()
            ffmpeg_path = os.path.join(bin_dir, "ffmpeg.exe")
            mp4decrypt_path = os.path.join(bin_dir, "mp4decrypt.exe")

            kinescope_video = KinescopeVideo(
                url=self.video_url.get(),
                referer_url=self.referer_url.get()
            )

            downloader = KinescopeDownloader(
                kinescope_video,
                temp_dir='./temp',
                ffmpeg_path=ffmpeg_path,
                mp4decrypt_path=mp4decrypt_path
            )

            video_resolutions = downloader.get_resolutions()
            qualities = [res[1] for res in video_resolutions] if video_resolutions else []

            self.root.after(0, lambda: self._update_qualities_ui(qualities))
            downloader.cleanup()

        except Exception as e:
            self.root.after(0, lambda: self.qualities_status_label.configure(
                text=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤: {str(e)}",
                text_color="#E74C3C"
            ))

    def _fetch_drm_keys(self):
        """–ü–æ–ª—É—á–∞–µ—Ç DRM –∫–ª—é—á–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        pssh_list = []
        license_url_list = []

        mpd_url, m3u8_url = self._extract_stream_urls()

        # --- –ü–æ–∏—Å–∫ 1: –í MPD (DASH) ---
        if mpd_url:
            try:
                self.add_progress_message("[*] –ü–æ–∏—Å–∫ PSSH –∏ License URL –≤ MPD (DASH)...")
                mpd_content = requests.get(mpd_url, timeout=10).text
                pssh_list = re.findall(r'<cenc:pssh[^>]*>([^<]+)</cenc:pssh>', mpd_content)
                license_url_list = re.findall(r'<dashif:Laurl>([^<]+)</dashif:Laurl>', mpd_content)
            except Exception as e:
                self.root.after(0, lambda: self.add_progress_message(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ MPD: {str(e)}"))

        # --- –ü–æ–∏—Å–∫ 2: –í M3U8 (HLS) —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---
        if not pssh_list and m3u8_url:
            self.add_progress_message("[*] –ü–æ–∏—Å–∫ PSSH –∏ License URL –≤ M3U8 (HLS)...")
            license_url_hls, pssh_hls = self._extract_pssh_from_hls(m3u8_url)

            if pssh_hls:
                pssh_list.append(pssh_hls)
            if license_url_hls:
                license_url_list.append(license_url_hls)

        # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π ---
        try:
            if pssh_list and license_url_list:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π PSSH –∏ License URL
                final_pssh = list(set(pssh_list))[0]
                final_license_url = list(set(license_url_list))[0]

                self.add_progress_message("[*] –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é pywidevine...")
                keys = self.get_key(final_pssh, final_license_url, self.referer_url.get())
                self.drm_keys = keys
                self.root.after(0, lambda: self.add_progress_message(f"[+] –ü–æ–ª—É—á–µ–Ω–æ DRM –∫–ª—é—á–µ–π: {len(keys)}"))
                return

            self.root.after(0, lambda: self.add_progress_message(
                "[!] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ PSSH –∏ License URL –≤ –ø–æ—Ç–æ–∫–∞—Ö (MPD/M3U8)."))

        except Exception as e:
            self.root.after(0, lambda: self.add_progress_message(f"[!] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DRM –∫–ª—é—á–µ–π: {str(e)}"))

    def _extract_stream_urls(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ JSON"""
        mpd_url, m3u8_url = None, None

        if self.json_data and 'options' in self.json_data and 'playlist' in self.json_data['options']:
            for item in self.json_data['options']['playlist']:
                if 'sources' in item:
                    if 'shakadash' in item['sources']:
                        mpd_url = item['sources']['shakadash'].get('src')
                    if 'hls' in item['sources']:
                        m3u8_url = item['sources']['hls'].get('src')
                if mpd_url and m3u8_url:
                    break

        return mpd_url, m3u8_url

    def get_key(self, pssh, license_url, referer):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–∏ –¥–ª—è Widevine"""
        base_headers = {
            'sec-ch-ua': '"Google Chrome";v="95", "Chromium";v="95", ";Not A Brand";v="99"',
            'sec-ch-ua-mobile': '?0',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36',
            'sec-ch-ua-platform': '"Windows"',
            'accept': '*/*',
            'sec-fetch-site': 'same-site',
            'sec-fetch-mode': 'cors',
            'sec-fetch-dest': 'empty',
            'accept-language': 'en-US,en;q=0.9,vi;q=0.8',
        }

        headers = base_headers.copy()
        headers.update({
            'authority': 'license.kinescope.io',
            'origin': referer,
            'referer': referer
        })

        wvd_path = "WVD.wvd"
        if not os.path.exists(wvd_path):
            raise FileNotFoundError("WVD.wvd —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        device = Device.load(wvd_path)
        cdm = Cdm.from_device(device)
        session_id = cdm.open()
        challenge = cdm.get_license_challenge(session_id, PSSH(pssh))
        response = httpx.post(license_url, data=challenge, headers=headers)
        cdm.parse_license(session_id, response.content)
        keys = [f"{key.kid.hex}:{key.key.hex()}" for key in cdm.get_keys(session_id) if key.type == 'CONTENT']
        cdm.close(session_id)
        return keys

    def _update_qualities_ui(self, qualities):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏"""
        if not qualities:
            self.qualities_status_label.configure(
                text="–ö–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                text_color="#E74C3C"
            )
            return

        quality_list = [f"{q}p" for q in qualities]
        self.available_qualities = qualities
        self.quality_combo.configure(values=quality_list)

        if quality_list:
            self.quality_combo.set(quality_list[-1])  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.qualities_loaded = True

            self.qualities_status_label.configure(
                text=f"‚úì –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—á–µ—Å—Ç–≤: {len(quality_list)}",
                text_color="#27AE60"
            )

            # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
            self.download_button.configure(state="normal")

    def browse_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""

        default_name = ""
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if self.video_title.get():
            default_name = re.sub(r'[\\/:*?"<>|]', '_', self.video_title.get())

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.path.split –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∏ –∏–º–µ–Ω–∏.
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, os.getcwd() –±—É–¥–µ—Ç –ø—É—Ç–µ–º.
        initial_dir = os.path.dirname(self.output_file.get()) if self.output_file.get() else os.getcwd()
        initial_file = os.path.basename(self.output_file.get()) if self.output_file.get() else default_name + ".mp4"

        filename = filedialog.asksaveasfilename(
            defaultextension=".mp4",
            filetypes=[("MP4 files", "*.mp4"), ("All files", "*.*")],
            # –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            initialfile=initial_file,
            initialdir=initial_dir
        )
        if filename:
            self.output_file.set(filename)

    # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    def start_unified_download(self):
        if self.download_in_progress:
            return

        if not self.output_file.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            return

        if not self.qualities_loaded:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_card.pack(fill="x", pady=(0, 20))

        self.download_in_progress = True
        self.download_button.configure(state="disabled")  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_text.configure(state="normal")
        self.progress_text.delete("1.0", "end")
        self.progress_text.configure(state="disabled")

        download_thread = threading.Thread(target=self.download_video_with_fallback)  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        download_thread.daemon = True
        download_thread.start()

    # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Å –∫–∞—Å–∫–∞–¥–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    def download_video_with_fallback(self):
        try:
            self.add_progress_message("[*] –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –°–ø–æ—Å–æ–± 2 (N_m3u8DL-RE)...")

            # –ü–æ–ø—ã—Ç–∫–∞ –°–ø–æ—Å–æ–±–∞ 2
            success = self._download_method_2()

            if not success:
                self.add_progress_message("[!] –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –ü—Ä–æ–±—É–µ–º –°–ø–æ—Å–æ–± 1 (kinescope)...")
                self._download_method_1()  # Fallback to Method 1

        except Exception as e:
            # –ï—Å–ª–∏ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
            self.show_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        finally:
            self.download_in_progress = False
            self.download_button.configure(state="normal")  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞

    def _download_method_1(self):
        """–ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)"""
        try:
            from kinescope import KinescopeVideo, KinescopeDownloader

            self.add_progress_message("[*] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ (–°–ø–æ—Å–æ–± 1)...")

            bin_dir = setup_bin_directory()
            ffmpeg_path = os.path.join(bin_dir, "ffmpeg.exe")
            mp4decrypt_path = os.path.join(bin_dir, "mp4decrypt.exe")

            self.add_progress_message("[*] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            kinescope_video = KinescopeVideo(
                url=self.video_url.get(),
                referer_url=self.referer_url.get()
            )

            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            class ProgressDownloader(KinescopeDownloader):
                def __init__(self, *args, **kwargs):
                    self.gui = kwargs.pop('gui')
                    super().__init__(*args, **kwargs)

                def _fetch_segments(self, segments_urls, filepath, progress_bar_label):
                    segments_urls = [seg for i, seg in enumerate(segments_urls) if i == segments_urls.index(seg)]
                    with open(filepath, 'wb') as f:
                        total = len(segments_urls)
                        for i, segment_url in enumerate(segments_urls, 1):
                            self._fetch_segment(segment_url, f)
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ GUI
                            self.gui.root.after(0, lambda: self.gui.add_progress_message(
                                f"{progress_bar_label}: {i}/{total} |{'‚ñà' * (i * 20 // total):20}| {i * 100 // total}%"
                            ))

            downloader = ProgressDownloader(
                kinescope_video,
                temp_dir='./temp',
                ffmpeg_path=ffmpeg_path,
                mp4decrypt_path=mp4decrypt_path,
                gui=self
            )

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            selected_quality_str = self.quality_combo.get()
            selected_height = int(selected_quality_str.replace('p', ''))
            video_resolutions = downloader.get_resolutions()

            chosen_resolution = None
            for res in video_resolutions:
                if res[1] == selected_height:
                    chosen_resolution = res
                    break

            if not chosen_resolution:
                chosen_resolution = video_resolutions[-1]

            self.add_progress_message(f"[*] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ {selected_quality_str}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            downloader.download(self.output_file.get(), chosen_resolution)

            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.add_progress_message("[+] –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–°–ø–æ—Å–æ–± 1)!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!\n–§–∞–π–ª: {self.output_file.get()}")
            return True  # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—Ç True

        except Exception as e:
            self.add_progress_message(f"[!] –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —Å–ø–æ—Å–æ–±–µ: {str(e)}")
            return False  # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—Ç False
        finally:
            if 'downloader' in locals():
                # downloader.cleanup() - –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ, —Ö–æ—Ç—è —è–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π
                pass

    def _download_method_2(self):
        """–í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ N_m3u8DL-RE)"""
        try:
            mpd_url, m3u8_url = self._extract_stream_urls()

            if not m3u8_url:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –ø–æ—Ç–æ–∫–∞ –≤ JSON")

            selected_quality = self.quality_combo.get().replace('p', '')

            # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ DRM –∫–ª—é—á–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –°–ø–æ—Å–æ–± 2, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            if not self.drm_keys:
                self.add_progress_message("[!] DRM –∫–ª—é—á–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –°–ø–æ—Å–æ–± 2 –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
                return False

            bin_dir = setup_bin_directory()
            n_m3u8dl_path = os.path.join(bin_dir, "N_m3u8DL-RE.exe")

            key_params = " ".join([f"--key {key}" for key in self.drm_keys])

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_path = self.output_file.get()
            save_dir = os.path.dirname(output_path)
            save_name = os.path.splitext(os.path.basename(output_path))[0]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            command = f'"{n_m3u8dl_path}" "{m3u8_url}" {key_params} -M format=mp4 -sv res="{selected_quality}" -sa all --log-level INFO --no-log --save-dir "{save_dir}" --save-name "{save_name}"'

            self.add_progress_message(f"[*] –ó–∞–ø—É—Å–∫ N_m3u8DL-RE...")
            self.add_progress_message(f"[*] –ö–æ–º–∞–Ω–¥–∞: {command}")

            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True,
                                       bufsize=1)

            vid_progress_pattern = re.compile(r'.*?(\d+/\d+\s+\d+\.\d+%)')

            last_progress = ""

            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    match = vid_progress_pattern.search(output)
                    if match:
                        progress_info = match.group(1)
                        if progress_info != last_progress:
                            self.add_progress_message(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_info}")
                            last_progress = progress_info

            if process.returncode == 0:
                self.add_progress_message("\n[+] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–°–ø–æ—Å–æ–± 2)!")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!\n–§–∞–π–ª: {output_path}")
                return True  # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—Ç True
            else:
                self.add_progress_message(f"[!] N_m3u8DL-RE –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {process.returncode}")
                return False  # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—Ç False

        except Exception as e:
            self.add_progress_message(f"[!] –û—à–∏–±–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–µ: {str(e)}")
            return False  # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—Ç False

    def _extract_pssh_from_hls(self, master_m3u8_url_full):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç Widevine License URL –∏ PSSH-–∫–ª—é—á –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ M3U8-—Ñ–∞–π–ª–∞.
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ 'get pssh.py'.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (license_url, pssh_key) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        license_url = None
        pssh_key = None

        # --- –®–ê–ì 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Widevine License URL –∏–∑ JSON (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏) ---
        if self.json_data:
            try:
                # 1. –ü–æ–ø—ã—Ç–∫–∞ Widevine
                license_url = self.json_data['options']['playlist'][0]['drm']['widevine']['licenseUrl']
            except (KeyError, IndexError):
                # 2. –ü–æ–ø—ã—Ç–∫–∞ Clearkey (Clearkey –∫–ª—é—á–∏ –Ω–µ –∏—â–µ–º, —Ç–æ–ª—å–∫–æ Widevine License URL)
                try:
                    license_url = self.json_data['options']['playlist'][0]['drm']['clearkey']['licenseUrl']
                except (KeyError, IndexError):
                    pass

        if not license_url:
            self.add_progress_message("[!] –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ widevine/clearkey licenseUrl –≤ JSON.")
            return None, None

        # --- –®–ê–ì 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PSSH-–∫–ª—é—á–∞ –∏–∑ M3U8-—Ñ–∞–π–ª–æ–≤ ---
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π base_url (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ master.m3u8
            base_url_match = re.search(r'^(https?://[^?]+?/master\.m3u8)', master_m3u8_url_full)
            if not base_url_match:
                self.add_progress_message("[!] –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—É—é URL –¥–ª—è master.m3u8.")
                return license_url, None

            base_url_clean = base_url_match.group(1)
            base_url_prefix = base_url_clean.replace('/master.m3u8', '')

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            query_params_match = re.search(r'\?(.*)', master_m3u8_url_full)
            token_params_list = []
            if query_params_match:
                for p in query_params_match.group(1).split('&'):
                    if p.startswith(('expires', 'sign', 'token', 'kinescope_project_id')) and (
                            len(p.split('=')) == 1 or p.split('=')[1]):
                        token_params_list.append(p)
            token_params = "&".join(token_params_list)

            # 1. –ó–∞–ø—Ä–æ—Å master.m3u8
            master_response = requests.get(base_url_clean, timeout=10)
            master_response.raise_for_status()
            master_content = master_response.text

            # 2. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–∏ (–≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ) —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∏—Ç—Ä–µ–π—Ç–æ–º
            stream_matches = re.findall(
                r'#EXT-X-STREAM-INF:.*?BANDWIDTH=(\d+).*?\n(media\.m3u8\?.*?)\n',
                master_content,
                re.DOTALL
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤, –∫–∞–∫ –≤ 'get pssh.py', –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PSSH
            audio_matches = re.findall(
                r'#EXT-X-MEDIA:TYPE=AUDIO.*?URI="([^"]+?media\.m3u8[^"]+?)"',
                master_content,
                re.DOTALL
            )

            media_streams = [(int(bandwidth), media_path) for bandwidth, media_path in stream_matches]
            # –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞–º –¥–∞–µ–º –≤—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç, —á—Ç–æ–±—ã –∏—Ö —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–æ
            for audio_path in audio_matches:
                media_streams.append((999999999, audio_path))

            media_streams.sort(key=lambda x: x[0], reverse=True)

            if not media_streams:
                self.add_progress_message("[!] –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤ media.m3u8 –≤ master.m3u8.")
                return license_url, None

            # 3. –ü–µ—Ä–µ–±–æ—Ä –ø–æ—Ç–æ–∫–æ–≤ –∏ –ø–æ–∏—Å–∫ PSSH
            for _, media_path_relative in media_streams:
                media_path_relative_clean = media_path_relative.split('?')[0]
                media_query_params_match = re.search(r'\?(.*)', media_path_relative)
                media_query_params = media_query_params_match.group(1) if media_query_params_match else ""

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ media.m3u8
                m3u8_url_checked = f"{base_url_prefix}/{media_path_relative_clean}?{media_query_params}&{token_params}"
                m3u8_url_checked = m3u8_url_checked.replace('&&', '&').rstrip('&')
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å
                m3u8_url_checked = re.sub(r'&token=(&|$)', r'\1', m3u8_url_checked).rstrip('&')

                try:
                    # –ó–∞–ø—Ä–æ—Å media.m3u8
                    media_response = requests.get(m3u8_url_checked, timeout=10)
                    media_response.raise_for_status()
                    media_content = media_response.text

                    # –ü–æ–∏—Å–∫ PSSH-–∫–ª—é—á–∞ Widevine –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
                    pssh_match = re.search(
                        r'#EXT-X-KEY.*?KEYFORMAT="urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed".*?URI="data:text/plain;base64,([^"]+)"',
                        media_content,
                        re.DOTALL
                    )
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    if not pssh_match:
                        pssh_match = re.search(
                            r'#EXT-X-KEY.*?URI="data:text/plain;base64,([^"]+)".*?KEYFORMAT="urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"',
                            media_content,
                            re.DOTALL
                        )

                    if pssh_match:
                        pssh_key = pssh_match.group(1)
                        self.add_progress_message("[+] PSSH –∏ License URL –Ω–∞–π–¥–µ–Ω—ã –≤ M3U8.")
                        return license_url, pssh_key  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

                except requests.exceptions.RequestException:
                    continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ç–æ–∫

            self.add_progress_message("[!] PSSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ media.m3u8.")
            return license_url, None

        except requests.exceptions.RequestException as e:
            self.add_progress_message(f"[!] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ M3U8: {e}")
            return license_url, None
        except Exception as e:
            self.add_progress_message(f"[!] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ PSSH –≤ HLS: {e}")
            return license_url, None

    def show_error(self, message):
        self.add_progress_message(f"[!] {message}")
        messagebox.showerror("–û—à–∏–±–∫–∞", message)
        self.download_in_progress = False
        # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
        self.download_button.configure(state="normal")

    def clear_fields(self):
        self.video_url.set("")
        self.referer_url.set("")
        self.output_file.set("")
        self.selected_quality.set("")
        self.quality_combo.set("")
        self.quality_combo.configure(values=[])
        self.qualities_loaded = False
        self.current_json_file.set("")
        self.json_data = None
        self.available_qualities = []
        self.drm_keys = []
        self.json_status_label.configure(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", text_color="#7F8C8D")
        self.qualities_status_label.configure(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª", text_color="#7F8C8D")
        # –û–ë–ù–û–í–õ–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
        self.download_button.configure(state="disabled")
        self.progress_card.pack_forget()


def main():
    root = ctk.CTk()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        icon_path = get_resource_path("icon.ico")
        if os.path.exists(icon_path):
            root.iconbitmap(icon_path)
        else:
            icon_path_png = get_resource_path("icon.png")
            if os.path.exists(icon_path_png):
                icon_image = tk.PhotoImage(file=icon_path_png)
                root.iconphoto(True, icon_image)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    app = KinescopeDownloaderGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()
